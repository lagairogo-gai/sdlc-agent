version: '3.8'

services:
  # Redis for message bus and caching
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentic-network

  # Neo4j for knowledge graph
  neo4j:
    image: neo4j:5.15-community
    container_name: agentic-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/agentic-password-2024
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./neo4j/plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "agentic-password-2024", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - agentic-network

  # PostgreSQL for relational data
  postgres:
    image: postgres:15-alpine
    container_name: agentic-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agentic_sdlc
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=agentic-db-password-2024
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_sdlc"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentic-network

  # Orchestration Engine
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: agentic-orchestrator
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=agentic-password-2024
      - POSTGRES_URL=postgresql://agentic_user:agentic-db-password-2024@postgres:5432/agentic_sdlc
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
      - SECURITY_SECRET_KEY=your-super-secret-jwt-key-change-in-production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentic-network
    restart: unless-stopped

  # Requirements Agent
  requirements-agent:
    build:
      context: ./agents/requirements
      dockerfile: Dockerfile
    container_name: agentic-requirements-agent
    environment:
      - AGENT_ID=requirements_agent_001
      - AGENT_TYPE=requirements
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JIRA_URL=${JIRA_URL}
      - JIRA_USERNAME=${JIRA_USERNAME}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
      - CONFLUENCE_URL=${CONFLUENCE_URL}
      - CONFLUENCE_USERNAME=${CONFLUENCE_USERNAME}
      - CONFLUENCE_API_TOKEN=${CONFLUENCE_API_TOKEN}
    volumes:
      - ./agents/requirements/config:/app/config
      - ./logs:/app/logs
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Design Agent
  design-agent:
    build:
      context: ./agents/design
      dockerfile: Dockerfile
    container_name: agentic-design-agent
    environment:
      - AGENT_ID=design_agent_001
      - AGENT_TYPE=design
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIGMA_API_TOKEN=${FIGMA_API_TOKEN}
    volumes:
      - ./agents/design/config:/app/config
      - ./logs:/app/logs
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Code Generation Agent
  code-agent:
    build:
      context: ./agents/code
      dockerfile: Dockerfile
    container_name: agentic-code-agent
    environment:
      - AGENT_ID=code_agent_001
      - AGENT_TYPE=code_generation
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITLAB_TOKEN=${GITLAB_TOKEN}
    volumes:
      - ./agents/code/config:/app/config
      - ./logs:/app/logs
      - ./code_workspace:/app/workspace
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Testing Agent
  testing-agent:
    build:
      context: ./agents/testing
      dockerfile: Dockerfile
    container_name: agentic-testing-agent
    environment:
      - AGENT_ID=testing_agent_001
      - AGENT_TYPE=testing
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SELENIUM_HUB_URL=http://selenium-hub:4444
    volumes:
      - ./agents/testing/config:/app/config
      - ./logs:/app/logs
      - ./test_results:/app/test_results
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'

  # CI/CD Agent
  cicd-agent:
    build:
      context: ./agents/cicd
      dockerfile: Dockerfile
    container_name: agentic-cicd-agent
    environment:
      - AGENT_ID=cicd_agent_001
      - AGENT_TYPE=integration
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JENKINS_URL=${JENKINS_URL}
      - JENKINS_USERNAME=${JENKINS_USERNAME}
      - JENKINS_API_TOKEN=${JENKINS_API_TOKEN}
      - GITHUB_ACTIONS_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ./agents/cicd/config:/app/config
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Deployment Agent
  deployment-agent:
    build:
      context: ./agents/deployment
      dockerfile: Dockerfile
    container_name: agentic-deployment-agent
    environment:
      - AGENT_ID=deployment_agent_001
      - AGENT_TYPE=deployment
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ARGOCD_URL=${ARGOCD_URL}
      - ARGOCD_TOKEN=${ARGOCD_TOKEN}
      - KUBERNETES_CONFIG_PATH=/app/config/kubeconfig
    volumes:
      - ./agents/deployment/config:/app/config
      - ./logs:/app/logs
      - ~/.kube:/app/.kube:ro
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Monitoring Agent
  monitoring-agent:
    build:
      context: ./agents/monitoring
      dockerfile: Dockerfile
    container_name: agentic-monitoring-agent
    environment:
      - AGENT_ID=monitoring_agent_001
      - AGENT_TYPE=monitoring
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - REDIS_URL=redis://redis:6379
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PROMETHEUS_URL=${PROMETHEUS_URL}
      - GRAFANA_URL=${GRAFANA_URL}
      - GRAFANA_TOKEN=${GRAFANA_TOKEN}
      - DATADOG_API_KEY=${DATADOG_API_KEY}
    volumes:
      - ./agents/monitoring/config:/app/config
      - ./logs:/app/logs
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=http://34.30.67.175:8000
        - REACT_APP_WS_URL=ws://34.30.67.175:8000/ws
    container_name: agentic-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://34.30.67.175:8000
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - agentic-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agentic-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=agentic-grafana-2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - agentic-network
    restart: unless-stopped

networks:
  agentic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  neo4j_data:
  neo4j_logs:
  postgres_data:
  prometheus_data:
  grafana_data: